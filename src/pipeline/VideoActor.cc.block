#include "VideoActor.h"

#include "GstConstants.h"
#include "../util/Math.h"
#include "../util/Log.h"

VideoActor::VideoActor(Actor* actor,
                      AssetDescriptor* asset_descriptor,
                      AssetQualityDescriptor* asset_quality_descriptor) :
            BaseActor(actor, asset_descriptor, asset_quality_descriptor) {
  if (actor->id.compare("") != 0) {
    bin          = gst_bin_new(GetGstElementId(GST_ELEM_BIN).c_str());
    filesrc      = gst_element_factory_make(GST_ELEM_FILESRC.c_str(),
                                            GetGstElementId(GST_ELEM_FILESRC).c_str());
    g_object_set(G_OBJECT(filesrc),
                 GST_PROP_LOCATION.c_str(),
                 asset_quality_descriptor->composed_path.c_str(),
                 NULL);
    queue        = gst_element_factory_make(GST_ELEM_QUEUE.c_str(),
                                            GetGstElementId(GST_ELEM_QUEUE).c_str());
    decodebin    = gst_element_factory_make(GST_ELEM_DECODEBIN.c_str(),
                                            GetGstElementId(GST_ELEM_DECODEBIN).c_str());
    g_signal_connect(decodebin, GST_EVENT_PAD_ADDED.c_str(),
                     G_CALLBACK(VideoActor::OnDecodebinPadAdded),
                     this);
    g_signal_connect(decodebin, GST_EVENT_NO_MORE_PADS.c_str(),
                     G_CALLBACK(VideoActor::OnNoMorePads),
                     this);
    block_count = 1;
    prerolled   = false;

    videoconvert = gst_element_factory_make(GST_ELEM_VIDEOCONVERT.c_str(),
                                            GetGstElementId(GST_ELEM_VIDEOCONVERT).c_str());
    audioconvert = gst_element_factory_make(GST_ELEM_AUDIOCONVERT.c_str(),
                                            GetGstElementId(GST_ELEM_AUDIOCONVERT).c_str());
    videoscale   = gst_element_factory_make(GST_ELEM_VIDEOSCALE.c_str(),
                                            GetGstElementId(GST_ELEM_VIDEOSCALE).c_str());
    if (actor->resize_mode == Actor::ResizeMode::AspectBorderTransparent ||
        actor->resize_mode == Actor::ResizeMode::AspectNone) {
      g_object_set(G_OBJECT(videoscale),
                   "add-borders",
                   false,
                   NULL);
    }
    filter       = gst_element_factory_make(GST_ELEM_CAPSFILTER.c_str(),
                                            GetGstElementId(GST_ELEM_CAPSFILTER).c_str());
    volume       = gst_element_factory_make(GST_ELEM_VOLUME.c_str(),
                                            GetGstElementId(GST_ELEM_VOLUME).c_str());

    CheckGstElements({{GST_ELEM_FILESRC, filesrc},
                      {GST_ELEM_QUEUE, queue},
                      {GST_ELEM_DECODEBIN, decodebin},
                      {GST_ELEM_VIDEOCONVERT, videoconvert},
                      {GST_ELEM_AUDIOCONVERT, audioconvert},
                      {GST_ELEM_CAPSFILTER, filter},
                      {GST_ELEM_VIDEOSCALE, videoscale},
                      {GST_ELEM_VOLUME, volume}});

    gst_bin_add_many(GST_BIN(bin),
                     filesrc,
                     queue,
                     decodebin,
                     videoconvert,
                     audioconvert,
                     videoscale,
                     filter,
                     volume, NULL);

    gst_element_link_many(filesrc, queue, decodebin, NULL);
    gst_element_link_many(videoconvert, videoscale, filter, NULL);
    gst_element_link_many(audioconvert, volume, NULL);

    // Video Src to Bin
    video_src_pad = gst_element_get_static_pad (filter, M_GST_PAD_SRC.c_str());
    gst_element_add_pad(bin, gst_ghost_pad_new(M_GST_PAD_VIDEO_SRC.c_str(), video_src_pad));
    gst_object_unref(GST_OBJECT (video_src_pad));

    // Audio Src to Bin
    audio_src_pad = gst_element_get_static_pad (volume, M_GST_PAD_SRC.c_str());
    gst_element_add_pad(bin, gst_ghost_pad_new(M_GST_PAD_AUDIO_SRC.c_str(), audio_src_pad));
    gst_object_unref(GST_OBJECT (audio_src_pad));

    LOG_TRACE("Setting to paused decodebin from actor: " << this->actor->id, LOGGER_PIPELINE);

    gst_element_set_state (this->decodebin, GST_STATE_PAUSED);
    gst_element_set_state (this->bin, GST_STATE_PAUSED);
    /*
    gst_element_seek(this->bin,
                   1.0,
                   GST_FORMAT_TIME,
                   GST_SEEK_FLAG_FLUSH,
                   GST_SEEK_TYPE_SET,
                   0,
                   GST_SEEK_TYPE_NONE,
                   GST_CLOCK_TIME_NONE);*/
  }
};

bool VideoActor::Prepare(Pipeline* pipeline, int seek_time) {
  ClearTimeouts();
  parent_pipeline = pipeline;
  if (actor->enters_at <= seek_time) {
    Plug();
  } else {
    long int timeout_id = g_timeout_add(actor->enters_at - seek_time,
                                        VideoActor::PlugTimeout,
                                        this);
  }
  return true;
};

bool VideoActor::Plug() {
  if (prerolled) {
    LOG_TRACE("PLUGGIN ACTOR: " << actor->id, LOGGER_PIPELINE);
    GstPad* video_src_pad;
    GstPad* audio_src_pad;
    GstPad* video_sink_pad;
    GstPad* audio_sink_pad;
    //gst_element_set_state(this->bin, GST_STATE_PLAYING);
    gst_bin_add(GST_BIN(parent_pipeline->pipeline), this->bin);

    video_src_pad  = gst_element_get_static_pad(this->bin, M_GST_PAD_VIDEO_SRC.c_str());
    audio_src_pad  = gst_element_get_static_pad(this->bin, M_GST_PAD_AUDIO_SRC.c_str());
    video_sink_pad = gst_element_get_request_pad(parent_pipeline->videomixer,
                                                M_GST_PAD_MULTI_SINK.c_str());
    //LOG_TRACE("SETTING BLOCK COUNT TO 2 FOR " << this->actor->id, LOGGER_PIPELINE);
    //block_count = 2;
    /*gst_pad_add_probe(video_src_pad,
                      GST_PAD_PROBE_TYPE_BLOCK,
                      (GstPadProbeCallback)VideoActor::OnBlockedPad,
                      this, NULL);*/
    //LOG_TRACE("BLOCKING VIDEO PAD " << this->actor->id, LOGGER_PIPELINE);
    //gst_pad_add_probe(video_src_pad, GST_PAD_PROBE_TYPE_BLOCK_DOWNSTREAM, NULL, NULL, NULL);
    audio_sink_pad = gst_element_get_request_pad(parent_pipeline->audiomixer,
                                                M_GST_PAD_MULTI_SINK.c_str());
    /*gst_pad_add_probe(audio_src_pad,
                      GST_PAD_PROBE_TYPE_BLOCK,
                      (GstPadProbeCallback)VideoActor::OnBlockedPad,
                      this, NULL);*/
    //LOG_TRACE("BLOCKING AUDIO PAD " << this->actor->id, LOGGER_PIPELINE);
    //gst_element_set_state(this->bin, GST_STATE_PAUSED);
    /*gst_element_seek(this->bin,
                     1.0,
                     GST_FORMAT_TIME,
                     GST_SEEK_FLAG_FLUSH,
                     GST_SEEK_TYPE_SET,
                     0,
                     GST_SEEK_TYPE_NONE,
                     GST_CLOCK_TIME_NONE);*/
    //gst_element_set_state(this->bin, GST_STATE_PLAYING);
    //gst_pad_add_probe(audio_src_pad, GST_PAD_PROBE_TYPE_BLOCK_DOWNSTREAM, NULL, NULL, NULL);

    //GstStateChangeReturn st =
    //gst_element_set_state (this->bin, GST_STATE_PAUSED);
    //LOG_TRACE("ELEMENT STATE SET: " << st, LOGGER_PIPELINE);
    //gst_element_set_state(this->bin, GST_STATE_PLAYING);
    //gst_element_set_state(parent_pipeline->pipeline, GST_STATE_PLAYING);
    gst_pad_link(video_src_pad, video_sink_pad);
    gst_pad_link(audio_src_pad, audio_sink_pad);
    this->videomixer_pad = video_sink_pad;
    this->audiomixer_pad = audio_sink_pad;
    gst_object_unref(GST_OBJECT(video_src_pad));
    gst_object_unref(GST_OBJECT(audio_src_pad));
    SetGstElements();
    gst_element_set_state(this->bin, GST_STATE_PLAYING);
    gst_element_set_state(parent_pipeline->pipeline, GST_STATE_PLAYING);
    //gst_element_set_state(this->bin, GST_STATE_PLAYING);
    //GstStateChangeReturn st =
    //gst_element_set_state (this->bin, GST_STATE_PLAYING);
    //LOG_TRACE("ELEMENT STATE SET: " << st, LOGGER_PIPELINE);
    //if (gst_lement_sync_state_with_parent(this->bin))
    //  LOG_TRACE("ELEMENT SET TO PARENT STATE", LOGGER_PIPELINE);
  }
  active = true;
  return true;
};

bool VideoActor::Unplug() {
  if (active) {
    active = false;
    // TODO: send EOS to bin and unlink from parent pipeline.
    return true;
  }
  return false;
};

int VideoActor::PlugTimeout(void* obj) {
  VideoActor* video_actor = static_cast<VideoActor*>(obj);
  video_actor->Plug();
  LOG_TRACE("Plugging VideoActor with ID: " << video_actor->actor->id, LOGGER_PIPELINE);
  return false;
};

int VideoActor::UnplugTimeout(void* obj) {
  VideoActor* video_actor = static_cast<VideoActor*>(obj);
  LOG_TRACE("Unplugging VideoActor with ID: " << video_actor->actor->id, LOGGER_PIPELINE);
  return false;
};

void VideoActor::SetGstElements() {
  SetDimensions(actor->width, actor->height);
  SetX(actor->x);
  SetY(actor->y);
  SetZ(actor->z);
};

void VideoActor::SetDimensions(double width, double height) {
  this->width = width;
  this->height = height;
  GstCaps* filter_caps;
  int scene_width = 640;
  int scene_height = 480;
  area_width_px = Math::RelativeToPx(width, scene_width);
  area_height_px = Math::RelativeToPx(height, scene_height);
  switch (actor->resize_mode) {
    case Actor::ResizeMode::AspectBorderTransparent:
      if (width > height) {
        height_px = area_height_px;
        width_px = height_px *
                   asset_quality_descriptor->natural_width /
                   asset_quality_descriptor->natural_height;
      } else {
        width_px = area_width_px;
        height_px = width_px *
                    asset_quality_descriptor->natural_height /
                    asset_quality_descriptor->natural_width;
      }
      break;
    case Actor::ResizeMode::AspectBorderBlack:
    case Actor::ResizeMode::AspectNone:
    case Actor::ResizeMode::AspectCrop:
      width_px = area_width_px;
      height_px = area_height_px;
      break;
  }
  filter_caps = gst_caps_new_simple ("video/x-raw",
         GST_PROP_WIDTH.c_str(), G_TYPE_INT, width_px,
         GST_PROP_HEIGHT.c_str(), G_TYPE_INT, height_px,
         NULL);
  g_object_set(G_OBJECT (filter), "caps", filter_caps, NULL);
  gst_caps_unref(filter_caps);
};

void VideoActor::SetX(double x) {
  this->x = x;
  if (actor->resize_mode == Actor::ResizeMode::AspectBorderTransparent) {
    g_object_set(G_OBJECT(videomixer_pad),
                 "xpos",
                 Math::RelativeToPx(x, 640) + ((area_width_px - width_px) / 2),
                 NULL);
  } else {
    g_object_set(G_OBJECT(videomixer_pad),
                 "xpos",
                 Math::RelativeToPx(x, 640),
                 NULL);
  }
};

void VideoActor::SetY(double y) {
  this->y = y;
  if (actor->resize_mode == Actor::ResizeMode::AspectBorderTransparent) {
    g_object_set(G_OBJECT(videomixer_pad),
                 "ypos",
                 Math::RelativeToPx(y, 480) + ((area_height_px - height_px) / 2),
                 NULL);
  } else {
    g_object_set(G_OBJECT(videomixer_pad),
                 "ypos",
                 Math::RelativeToPx(y, 480),
                 NULL);
  }
};

void VideoActor::SetZ(int z) {
  this->z = z;
  g_object_set(G_OBJECT(videomixer_pad),
                 "zorder",
                 z,
                 NULL);
};

void VideoActor::SetAlpha(double alpha) {
  this->alpha = alpha;
  g_object_set(G_OBJECT(videomixer_pad),
                 "alpha",
                 alpha,
                 NULL);
};

void VideoActor::DecBlockCount() {
  block_count--;
  if (block_count == 0) {
    prerolled = true;
    LOG_TRACE("VIDEOACTOR IS PREROLLED. " << actor->id, LOGGER_PIPELINE);
    GstStructure* structure = gst_structure_new("video_actor_plug",
                                                "video_actor", G_TYPE_POINTER, this,
                                                NULL);
    gst_bus_post (parent_pipeline->bus, gst_message_new_application(
          GST_OBJECT_CAST (parent_pipeline->pipeline),
          structure));
    //gst_structure_free(structure);
    /*gst_element_seek(this->decodebin,
                   1.0,
                   GST_FORMAT_TIME,
                   (GstSeekFlags)(GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_ACCURATE),
                   GST_SEEK_TYPE_SET,
                   0,
                   GST_SEEK_TYPE_NONE,
                   GST_CLOCK_TIME_NONE);
    if (active)
      Plug();*/
  }
};

void VideoActor::OnDecodebinPadAdded(GstElement* decodebin,
                                     GstPad* pad,
                                     VideoActor* video_actor) {
  if (video_actor->prerolled)
    return;

  GstCaps          *new_pad_caps = NULL;
  GstStructure     *new_pad_struct = NULL;
  const gchar      *new_pad_type = NULL;
  GstPad           *sink_pad = NULL;
  GstPadLinkReturn  ret;

  new_pad_caps   = gst_pad_query_caps(pad, NULL);
  new_pad_struct = gst_caps_get_structure(new_pad_caps, 0);
  new_pad_type   = gst_structure_get_name(new_pad_struct);

  std::string s_pad_type = std::string(new_pad_type);
  if (g_str_has_prefix(new_pad_type, "video/x-raw")) {
    sink_pad = gst_element_get_static_pad(video_actor->videoconvert, "sink");
    LOG_TRACE("Adding Video Decodebin Pad. " << video_actor->actor->id, LOGGER_PIPELINE);
  }
  if (g_str_has_prefix(new_pad_type, "audio/x-raw")) {
    sink_pad = gst_element_get_static_pad(video_actor->audioconvert, "sink");
    LOG_TRACE("Adding Audio Decodebin Pad. " << video_actor->actor->id, LOGGER_PIPELINE);
  }
  if (!gst_pad_is_linked(sink_pad)) {
    video_actor->block_count++;
    LOG_TRACE("OnDecodebinPadAdded: " << video_actor->actor->id << " block_count: " << video_actor->block_count, LOGGER_PIPELINE);
    gst_pad_add_probe(pad,
                      GST_PAD_PROBE_TYPE_BLOCK_DOWNSTREAM,
                      (GstPadProbeCallback) VideoActor::OnBlockedPad, video_actor, NULL);
    ret = gst_pad_link(pad, sink_pad);
    //gst_element_sync_state_with_parent(decodebin);
  }
  gst_caps_unref(new_pad_caps);
  gst_object_unref(sink_pad);
};

void VideoActor::OnNoMorePads(GstElement* decodebin,
                              GstPad* pad,
                              VideoActor* video_actor) {
  LOG_TRACE("No MORE PADS FOR " << video_actor->actor->id, LOGGER_PIPELINE);
  if (video_actor->prerolled)
    return;
  video_actor->DecBlockCount();
  LOG_TRACE("OnNoMorePads: " << video_actor->actor->id << " block_count: " << video_actor->block_count, LOGGER_PIPELINE);
};

int VideoActor::OnBlockedPad(GstPad*          pad,
                            GstPadProbeInfo* info,
                            VideoActor*      video_actor) {
  if (video_actor->prerolled)
    return GST_PAD_PROBE_REMOVE;
  video_actor->DecBlockCount();
  LOG_TRACE("OnBlockedPad: " << video_actor->actor->id << " block_count: " << video_actor->block_count, LOGGER_PIPELINE);
  /*if (video_actor->prerolled)
    return GST_PAD_PROBE_REMOVE;*/
  return GST_PAD_PROBE_OK;
  /*
  //if (info->type == GST_PAD_PROBE_TYPE_BLOCK) {
    LOG_TRACE("PAD IS BLOCKED FOR " << video_actor->actor->id, LOGGER_PIPELINE);
    video_actor->block_count--;
    LOG_TRACE(" COUNT FOR BLOCK IS: " << video_actor->block_count, LOGGER_PIPELINE);
    if (video_actor->block_count == 0) {
      gst_bin_add(GST_BIN(video_actor->parent_pipeline->pipeline), video_actor->bin);
      GstPad* video_src_pad;
      GstPad* audio_src_pad;
      GstPad* video_sink_pad;
      GstPad* audio_sink_pad;
      video_src_pad  = gst_element_get_static_pad(video_actor->bin, M_GST_PAD_VIDEO_SRC.c_str());
      audio_src_pad  = gst_element_get_static_pad(video_actor->bin, M_GST_PAD_AUDIO_SRC.c_str());
      video_sink_pad = gst_element_get_request_pad(video_actor->parent_pipeline->videomixer,
                                                M_GST_PAD_MULTI_SINK.c_str());
      audio_sink_pad = gst_element_get_request_pad(video_actor->parent_pipeline->audiomixer,
                                                M_GST_PAD_MULTI_SINK.c_str());
      video_actor->videomixer_pad = video_sink_pad;
      video_actor->audiomixer_pad = audio_sink_pad;
      gst_pad_link(video_src_pad, video_sink_pad);
      gst_pad_link(audio_src_pad, audio_sink_pad);
      video_actor->SetGstElements();
      //gst_element_set_state (video_actor->parent_pipeline->pipeline, GST_STATE_PLAYING);
      gst_element_sync_state_with_parent(video_actor->bin);
      LOG_TRACE("SETTING VIDEO ACTOR BIN TO PLAY.", LOGGER_PIPELINE);
    }
  //}
  return GST_PAD_PROBE_REMOVE;
  */
};

